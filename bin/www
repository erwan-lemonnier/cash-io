#!/usr/bin/env python

import os
import sys
import logging
import json
import re
from flask import Flask, request, render_template

path_here      = os.path.dirname(os.path.realpath(__file__))
path_libs      = os.path.join(path_here, '..', 'lib')
path_templates = os.path.join(path_here, '..', 'templates')
path_static    = os.path.join(path_here, '..', 'static')

sys.path.append(path_libs)

from cashio.common import setup_logging, create_http_response
from cashio.common import Transaction
import cashio.db as db



server_ip = '127.0.0.1'
server_port = 8080

log = None

app = Flask(__name__,
            template_folder=path_templates,
            static_folder=path_static)

#
# REST api
#

@app.route("/api/v0/transaction/add_many", methods=['POST'])
def handle_add_transactions():
    transactions = request.form['transactions'] or '[]'
    transactions = json.loads(transactions)

    log.debug("Got %s transactions" % len(transactions))
    log.debug("First one is: %s" % transactions[0])
    for t in transactions:
        t = Transaction(t['date'],
                        t['amount'],
                        t['target'],
                        t['owner'],
                        t['raw'])
        db.add_transaction(t)

    return create_http_response("ok", 200)

@app.route("/api/v0/transactions/get/<date>", methods=['GET'])
def handle_get_transactions(date):
    """Return a list of all transactions under a given month. 'date' is either
    a yyyy-mm or a yyyy. Return a list of transactions, and sums of amounts
    spent, earned and total"""

    month, year = None, None
    if re.match("^\d\d\d\d-\d\d$", date):
        year, month = date.split('-')
    elif re.match("^\d\d\d\d", date):
        year = date
    else:
        # TODO: return error code wrong date format
        raise ValueError("Date format not supported: %s" % date)

    transactions = []
    total_earned, total_spent, total = 0, 0, 0
    sum_by_category = {}
    for t in db.get_transactions(year, month):
        transactions.append(t.to_json())
        total = total + t.amount
        # TODO: put that magic ignore string in a config file
        if t.category == '00-IGNORE':
            continue

        if t.amount > 0:
            total_earned = total_earned + t.amount
        else:
            total_spent = total_spent + t.amount

        if t.category in sum_by_category:
            sum_by_category[t.category] = sum_by_category[t.category] + t.amount
        else:
            sum_by_category[t.category] = t.amount

    data = {
        'transactions': transactions,
        'total_spent': abs(total_spent),
        'total_earned': abs(total_earned),
        'total': abs(total),
        'categories': sum_by_category,
    }

    log.debug("Returning aggregated categories: %s" % sum_by_category)
    return create_http_response(data, 200)

@app.route("/api/v0/category/create_or_update", methods=['POST'])
def handle_create_or_update_category():
    """Insert in database a list of cleantargets mapping to the same category.
    This resets the category, deleting all previous mappings for that category.
    Used for seeding data.
    POST data:
    {
        'targets': [<list of cleantargets as json>],
        'category': 'category-string',
    }
    """
    cleantargets = request.form['targets'] or '[]'
    category = request.form['category']

    if not category:
        return create_http_response("Need a category", 500)

    cleantargets = json.loads(cleantargets)

    log.debug("Got category %s, with %s cleantargets" %
              (category, len(cleantargets)))

    db.delete_category(category)
    for c in cleantargets:
        if c != '':
            db.add_target(c, category)

    return create_http_response("ok", 200)

@app.route("/api/v0/transactions/get_years", methods=['GET'])
def handle_get_years():
    """Return a list of all years for which there are transactions"""
    years = db.get_years()
    return create_http_response({'years': years}, 200)

#
# HTML server
#

@app.route("/", methods=['GET'])
def handle_root():
    log.debug("Serving index.html in %s" % path_templates)
    return render_template("index.html")

@app.route("/monthly_transactions", methods=["GET"])
def handle_monthly_transactions():
    years = db.get_years()
    month_to_digit = {
        'Jan':  '01', 'Feb':  '02', 'Mars': '03', 'April': '04',
        'Mai':  '05', 'June': '06', 'July': '07', 'Aug':   '08',
        'Sept': '09', 'Oct':  '10', 'Nov':  '11', 'Dec':   '12',
        }
    return render_template("monthly_transactions.html",
                           transaction_years=years,
                           month_to_digit=month_to_digit)


#
# Toying with jquery
#

@app.route("/learning/jquery", methods=['GET'])
def handle_jquery():
    return create_http_response({'id': '1234', 'content': 'hello!'}, 200)

@app.route("/jquery/", methods=['GET'])
def handle_html_jquery():
    return render_template("jquery.html")



if __name__ == '__main__':
    log = setup_logging('www')
    db.create_database(log)
    log.info("Starting www server on %s:%s" % (server_ip, server_port))
    app.run(debug=True, host=server_ip, port=server_port)
