#!/usr/bin/env python

import os
import glob
import re
import requests
import logging
import sys
import json
import click

PATH_LIBS=os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'lib')
sys.path.append(PATH_LIBS)

from cashio.common import setup_logging

log = None

www = "http://127.0.0.1:8080/api/v0"
batch_size = 200

path_etc = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'etc')

transactions = []

def send_transaction(data, flush=False):
    global transactions
    if data:
        transactions.append(data)
    if flush or len(transactions) >= batch_size:
        log.debug("Sending %s transactions" % len(transactions))
        r = requests.post("%s/transactions/add_many" % www, data={'transactions': json.dumps(transactions)})
        if r.status_code != '200':
            r.raise_for_status()
        transactions = []

def normalize_weird_chars(s):
    s = s.replace('\xc5', 'A')
    s = s.replace('\xc4', 'A')
    s = s.replace('\xd6', 'O')
    s = s.replace('\xe4', 'a')
    s = s.replace('\xe5', 'a')
    s = s.replace('\xe9', 'e')
    s = s.replace('\xf6', 'o')
    s = s.replace('\xc9', 'e')
    return s

def normalize_target(s):
    if '/' in s:
        s = s.split('/')[0]
    s = s.strip()
    s = s.lower()
    return s

def normalize_amount(s):
    return s.replace('.', '').replace(',', '.')

def load_accounts(path):
    """Load all bank accounts from file"""

    for account_path in glob.glob("%s/*.txt" % path):
        log.info("Loading account %s" % os.path.split(account_path)[1])

        with open(account_path) as fh:
            for l in fh:
                l = l.strip()

                l = normalize_weird_chars(l)

                if l.startswith('#'):
                    if '@owner' in l:
                        owner = l.split()[2]
                    continue

                if l == '':
                    continue

                if not owner:
                    raise Exception("First line of account file %s should have set an owner" % account_path)

                # parse account line
                m = re.match('^\s*(\d{4}-\d\d-\d\d)\s+(\d{4}-\d\d-\d\d)\s+(\d{10}[S]?)\s+(.*?)\s+([-\d,\.]+)\s+([-\d,\.]+)\s*$', l)
                if m:
                    data = {
                        'owner': owner,
                        'date': m.group(1),
                        'target': normalize_target(m.group(4)),
                        'amount': normalize_amount(m.group(5)),
                        'raw': l,
                    }
                    send_transaction(data)
                    continue

                m = re.match('^\s*(\d{4}-\d\d-\d\d)\s+(.+)\s+([-\d,\.]+)\s+([-\d,\.]+)\s*$', l)
                if m:
                    data = {
                        'owner': owner,
                        'date': m.group(1),
                        'target': normalize_target(m.group(2)),
                        'amount': normalize_amount(m.group(3)),
                        'raw': l,
                    }
                    send_transaction(data)
                    continue

                log.error("Failed to parse line [%s] in account %s" % (l, account_path))

        send_transaction(None, flush=True)
        log.info("Done parsing %s" % account_path)

def load_categories(path):
    """Load categories from files"""
    for cat_path in glob.glob("%s/*.cat" % path):
        cat_name = os.path.split(cat_path)[1]
        cat_name = cat_name.split('.')[0]
        log.info("Loading category %s" % cat_name)

        targets = []
        with open(cat_path) as fh:
            for l in fh:
                l = l.strip()

                if l.startswith('#'):
                    continue

                targets.append(l)

        log.debug("Sending %s targets mapping to category %s" %
                  (len(targets), cat_name))

        data = {
            'category': cat_name,
            'targets': json.dumps(targets),
        }
        r = requests.post("%s/categories/create_or_update" % www, data=data)
        if r.status_code != '200':
            r.raise_for_status()



@click.command()
@click.option('--path', default=path_etc, help='Path where to find accounts or categories. Defaults to \'%s\'.' % path_etc)
@click.option('--accounts', is_flag=True, default=False, help='Load bank ledgers from files.')
@click.option('--categories', is_flag=True, default=False, help='Load categories from files.')
def load_data(path, accounts, categories):
    """Load bank accounts and/or categories from files and into cash-io."""
    if not categories and not accounts:
        log.info("Nothing to do. Please specify --accounts or --categories.")
        sys.exit(0)

    if categories:
        path_cats = os.path.join(path, 'cats')
        log.info("Loading categories from %s" % path_cats)
        load_categories(path_cats)

    if accounts:
        log.info("Loading accounts from %s" % path)
        load_accounts(path)


if __name__ == '__main__':
    log = setup_logging('load_data')
    load_data()
